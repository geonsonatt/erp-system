# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ERP —Å–∏—Å—Ç–µ–º—ã
"""

import tkinter as tk
from tkinter import ttk, messagebox
from tkinter import Canvas
import math

class AnalyticsModule:
    def __init__(self, parent_frame, database):
        self.parent = parent_frame
        self.db = database
        self.create_widgets()
        self.load_analytics()
        
    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥—É–ª—è
        title_label = tk.Label(
            self.parent,
            text="üìä –ì–†–ê–§–ò–ß–ï–°–ö–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê",
            font=('Arial', 16, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        title_label.pack(pady=10)
        
        # –°–æ–∑–¥–∞–µ–º Notebook –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        self.notebook = ttk.Notebook(self.parent)
        self.notebook.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü—Ä–æ–¥–∞–∂–∏"
        self.sales_frame = tk.Frame(self.notebook, bg='white')
        self.notebook.add(self.sales_frame, text="üí∞ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂")
        
        # –í–∫–ª–∞–¥–∫–∞ "–¢–æ–≤–∞—Ä—ã"
        self.products_frame = tk.Frame(self.notebook, bg='white')
        self.notebook.add(self.products_frame, text="üì¶ –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –í–∫–ª–∞–¥–∫–∞ "–ö–ª–∏–µ–Ω—Ç—ã"
        self.customers_frame = tk.Frame(self.notebook, bg='white')
        self.notebook.add(self.customers_frame, text="üë• –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫
        self.create_sales_analytics()
        self.create_products_analytics()
        self.create_customers_analytics()
        
    def create_sales_analytics(self):
        """–°–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂"""
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = tk.Button(
            self.sales_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            command=self.update_sales_chart,
            bg='#3498db',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat'
        )
        refresh_btn.pack(pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_frame = tk.Frame(self.sales_frame, bg='#ecf0f1', relief='raised', bd=2)
        stats_frame.pack(fill='x', padx=20, pady=10)
        
        self.sales_stats_label = tk.Label(
            stats_frame,
            text="–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...",
            font=('Arial', 12),
            bg='#ecf0f1',
            fg='#2c3e50',
            justify='left'
        )
        self.sales_stats_label.pack(padx=20, pady=15)
        
        # Canvas –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        self.sales_canvas = Canvas(
            self.sales_frame,
            width=600,
            height=400,
            bg='white',
            relief='sunken',
            bd=2
        )
        self.sales_canvas.pack(pady=20)
        
    def create_products_analytics(self):
        """–°–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤"""
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = tk.Button(
            self.products_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            command=self.update_products_chart,
            bg='#27ae60',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat'
        )
        refresh_btn.pack(pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö
        info_frame = tk.Frame(self.products_frame, bg='#ecf0f1', relief='raised', bd=2)
        info_frame.pack(fill='x', padx=20, pady=10)
        
        self.products_info_label = tk.Label(
            info_frame,
            text="–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö...",
            font=('Arial', 12),
            bg='#ecf0f1',
            fg='#2c3e50',
            justify='left'
        )
        self.products_info_label.pack(padx=20, pady=15)
        
        # Canvas –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.products_canvas = Canvas(
            self.products_frame,
            width=600,
            height=400,
            bg='white',
            relief='sunken',
            bd=2
        )
        self.products_canvas.pack(pady=20)
        
    def create_customers_analytics(self):
        """–°–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = tk.Button(
            self.customers_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            command=self.update_customers_chart,
            bg='#e67e22',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat'
        )
        refresh_btn.pack(pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö
        info_frame = tk.Frame(self.customers_frame, bg='#ecf0f1', relief='raised', bd=2)
        info_frame.pack(fill='x', padx=20, pady=10)
        
        self.customers_info_label = tk.Label(
            info_frame,
            text="–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö...",
            font=('Arial', 12),
            bg='#ecf0f1',
            fg='#2c3e50',
            justify='left'
        )
        self.customers_info_label.pack(padx=20, pady=15)
        
        # Canvas –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.customers_canvas = Canvas(
            self.customers_frame,
            width=600,
            height=400,
            bg='white',
            relief='sunken',
            bd=2
        )
        self.customers_canvas.pack(pady=20)
        
    def load_analytics(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        self.update_sales_chart()
        self.update_products_chart()
        self.update_customers_chart()
        
    def update_sales_chart(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É –ø—Ä–æ–¥–∞–∂"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT status, COUNT(*) as count, SUM(total_amount) as total
            FROM orders 
            GROUP BY status
        ''')
        sales_data = cursor.fetchall()
        
        cursor.execute('SELECT SUM(total_amount) FROM orders')
        total_sales = cursor.fetchone()[0] or 0
        
        cursor.execute('SELECT COUNT(*) FROM orders')
        total_orders = cursor.fetchone()[0] or 0
        
        cursor.execute('SELECT AVG(total_amount) FROM orders')
        avg_order = cursor.fetchone()[0] or 0
        
        conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–î–ê–ñ:

üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {total_sales:.2f} ‚ÇΩ
üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}
üìà –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_order:.2f} ‚ÇΩ

–ó–ê–ö–ê–ó–´ –ü–û –°–¢–ê–¢–£–°–ê–ú:
"""
        for status, count, total in sales_data:
            percentage = (count / total_orders * 100) if total_orders > 0 else 0
            stats_text += f"‚Ä¢ {status}: {count} –∑–∞–∫–∞–∑–æ–≤ ({percentage:.1f}%) - {total:.2f} ‚ÇΩ\n"
            
        self.sales_stats_label.config(text=stats_text)
        
        # –†–∏—Å—É–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        self.draw_bar_chart(self.sales_canvas, sales_data, "–ó–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
        
    def update_products_chart(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É —Ç–æ–≤–∞—Ä–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT category, COUNT(*) as count, SUM(quantity * price) as value
            FROM products 
            GROUP BY category
        ''')
        categories_data = cursor.fetchall()
        
        cursor.execute('SELECT COUNT(*) FROM products')
        total_products = cursor.fetchone()[0] or 0
        
        cursor.execute('SELECT SUM(quantity * price) FROM products')
        total_value = cursor.fetchone()[0] or 0
        
        cursor.execute('SELECT SUM(quantity) FROM products')
        total_quantity = cursor.fetchone()[0] or 0
        
        conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info_text = f"""
üì¶ –ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–û–í:

üè∑Ô∏è –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}
üìä –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–∫–ª–∞–¥–∞: {total_value:.2f} ‚ÇΩ
üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_quantity} —à—Ç.

–¢–û–í–ê–†–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:
"""
        for category, count, value in categories_data:
            percentage = (count / total_products * 100) if total_products > 0 else 0
            info_text += f"‚Ä¢ {category}: {count} —Ç–æ–≤–∞—Ä–æ–≤ ({percentage:.1f}%) - {value:.2f} ‚ÇΩ\n"
            
        self.products_info_label.config(text=info_text)
        
        # –†–∏—Å—É–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        self.draw_pie_chart(self.products_canvas, categories_data, "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        
    def update_customers_chart(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT c.name, COUNT(o.id) as orders_count, 
                   COALESCE(SUM(o.total_amount), 0) as total_spent
            FROM customers c
            LEFT JOIN orders o ON c.id = o.customer_id
            GROUP BY c.id, c.name
            ORDER BY total_spent DESC
            LIMIT 10
        ''')
        customers_data = cursor.fetchall()
        
        cursor.execute('SELECT COUNT(*) FROM customers')
        total_customers = cursor.fetchone()[0] or 0
        
        cursor.execute('''
            SELECT COUNT(DISTINCT customer_id) 
            FROM orders
        ''')
        active_customers = cursor.fetchone()[0] or 0
        
        conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info_text = f"""
üë• –ê–ù–ê–õ–ò–ó –ö–õ–ò–ï–ù–¢–û–í:

üè¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_customers}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {active_customers}
üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {(active_customers/total_customers*100 if total_customers > 0 else 0):.1f}%

–¢–û–ü-10 –ö–õ–ò–ï–ù–¢–û–í –ü–û –°–£–ú–ú–ï –ó–ê–ö–ê–ó–û–í:
"""
        for i, (name, orders, total) in enumerate(customers_data[:5], 1):
            info_text += f"{i}. {name}: {orders} –∑–∞–∫–∞–∑–æ–≤ - {total:.2f} ‚ÇΩ\n"
            
        self.customers_info_label.config(text=info_text)
        
        # –†–∏—Å—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        self.draw_horizontal_bar_chart(self.customers_canvas, customers_data, "–¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ –∑–∞–∫–∞–∑–æ–≤")
        
    def draw_bar_chart(self, canvas, data, title):
        """–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É"""
        canvas.delete("all")
        
        if not data:
            canvas.create_text(300, 200, text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", 
                             font=('Arial', 14), fill='#7f8c8d')
            return
            
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∏–∞–≥—Ä–∞–º–º—ã
        width = 600
        height = 400
        margin = 60
        chart_width = width - 2 * margin
        chart_height = height - 2 * margin
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        canvas.create_text(width//2, 20, text=title, font=('Arial', 14, 'bold'), fill='#2c3e50')
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        max_value = max(item[1] for item in data)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        
        # –†–∏—Å—É–µ–º —Å—Ç–æ–ª–±—Ü—ã
        bar_width = chart_width // len(data) - 10
        colors = ['#3498db', '#e74c3c', '#27ae60', '#f39c12', '#9b59b6', '#34495e']
        
        for i, (status, count, total) in enumerate(data):
            x = margin + i * (chart_width // len(data)) + 5
            bar_height = (count / max_value) * chart_height if max_value > 0 else 0
            y = height - margin - bar_height
            
            # –°—Ç–æ–ª–±–µ—Ü
            color = colors[i % len(colors)]
            canvas.create_rectangle(x, y, x + bar_width, height - margin, 
                                  fill=color, outline='#2c3e50', width=2)
            
            # –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–ª–±—Ü–µ
            canvas.create_text(x + bar_width//2, y - 10, text=str(count), 
                             font=('Arial', 10, 'bold'), fill='#2c3e50')
            
            # –ü–æ–¥–ø–∏—Å—å —Å—Ç–∞—Ç—É—Å–∞
            canvas.create_text(x + bar_width//2, height - margin + 20, 
                             text=status[:8] + '...' if len(status) > 8 else status, 
                             font=('Arial', 9), fill='#2c3e50', angle=0)
                             
        # –û—Å–∏
        canvas.create_line(margin, height - margin, width - margin, height - margin, 
                         width=2, fill='#2c3e50')  # X
        canvas.create_line(margin, margin, margin, height - margin, 
                         width=2, fill='#2c3e50')  # Y
                         
    def draw_pie_chart(self, canvas, data, title):
        """–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É"""
        canvas.delete("all")
        
        if not data:
            canvas.create_text(300, 200, text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", 
                             font=('Arial', 14), fill='#7f8c8d')
            return
            
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        canvas.create_text(300, 20, text=title, font=('Arial', 14, 'bold'), fill='#2c3e50')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä—É–≥–∞
        center_x, center_y = 250, 200
        radius = 100
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total = sum(item[1] for item in data)
        
        # –¶–≤–µ—Ç–∞
        colors = ['#3498db', '#e74c3c', '#27ae60', '#f39c12', '#9b59b6', '#34495e', '#1abc9c', '#e67e22']
        
        # –†–∏—Å—É–µ–º —Å–µ–∫—Ç–æ—Ä–∞
        start_angle = 0
        legend_y = 80
        
        for i, (category, count, value) in enumerate(data):
            if total == 0:
                continue
                
            # –£–≥–æ–ª —Å–µ–∫—Ç–æ—Ä–∞
            angle = (count / total) * 360
            end_angle = start_angle + angle
            
            # –¶–≤–µ—Ç
            color = colors[i % len(colors)]
            
            # –†–∏—Å—É–µ–º —Å–µ–∫—Ç–æ—Ä
            if angle > 0:
                self.draw_pie_slice(canvas, center_x, center_y, radius, start_angle, end_angle, color)
                
            # –õ–µ–≥–µ–Ω–¥–∞
            legend_x = 450
            canvas.create_rectangle(legend_x, legend_y + i * 25, legend_x + 15, legend_y + i * 25 + 15, 
                                  fill=color, outline='#2c3e50')
            canvas.create_text(legend_x + 20, legend_y + i * 25 + 7, 
                             text=f"{category}: {count} ({count/total*100:.1f}%)", 
                             font=('Arial', 9), fill='#2c3e50', anchor='w')
            
            start_angle = end_angle
            
    def draw_pie_slice(self, canvas, x, y, radius, start_angle, end_angle, color):
        """–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å–µ–∫—Ç–æ—Ä –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —É–≥–ª—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
        start_rad = math.radians(start_angle)
        end_rad = math.radians(end_angle)
        
        # –¢–æ—á–∫–∏ –¥–ª—è –¥—É–≥–∏
        x1 = x + radius * math.cos(start_rad)
        y1 = y + radius * math.sin(start_rad)
        x2 = x + radius * math.cos(end_rad)
        y2 = y + radius * math.sin(end_rad)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω
        points = [x, y, x1, y1]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –¥—É–≥–∏
        num_points = max(2, int(abs(end_angle - start_angle) / 5))
        for i in range(num_points + 1):
            angle = start_rad + (end_rad - start_rad) * i / num_points
            px = x + radius * math.cos(angle)
            py = y + radius * math.sin(angle)
            points.extend([px, py])
            
        points.extend([x2, y2])
        
        # –†–∏—Å—É–µ–º –ø–æ–ª–∏–≥–æ–Ω
        canvas.create_polygon(points, fill=color, outline='#2c3e50', width=2)
        
    def draw_horizontal_bar_chart(self, canvas, data, title):
        """–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É"""
        canvas.delete("all")
        
        if not data:
            canvas.create_text(300, 200, text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", 
                             font=('Arial', 14), fill='#7f8c8d')
            return
            
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        canvas.create_text(300, 20, text=title, font=('Arial', 14, 'bold'), fill='#2c3e50')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5
        display_data = data[:5]
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∏–∞–≥—Ä–∞–º–º—ã
        margin = 80
        chart_height = 300
        chart_width = 400
        
        if not display_data:
            return
            
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        max_value = max(item[2] for item in display_data)  # total_spent
        
        # –†–∏—Å—É–µ–º –ø–æ–ª–æ—Å—ã
        bar_height = chart_height // len(display_data) - 10
        colors = ['#3498db', '#e74c3c', '#27ae60', '#f39c12', '#9b59b6']
        
        for i, (name, orders, total) in enumerate(display_data):
            y = 60 + i * (chart_height // len(display_data))
            bar_width = (total / max_value) * chart_width if max_value > 0 else 0
            
            # –ü–æ–ª–æ—Å–∞
            color = colors[i % len(colors)]
            canvas.create_rectangle(margin, y, margin + bar_width, y + bar_height, 
                                  fill=color, outline='#2c3e50', width=2)
            
            # –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
            display_name = name[:15] + '...' if len(name) > 15 else name
            canvas.create_text(margin - 5, y + bar_height//2, text=display_name, 
                             font=('Arial', 9), fill='#2c3e50', anchor='e')
            
            # –ó–Ω–∞—á–µ–Ω–∏–µ
            canvas.create_text(margin + bar_width + 5, y + bar_height//2, 
                             text=f"{total:.0f} ‚ÇΩ", 
                             font=('Arial', 9, 'bold'), fill='#2c3e50', anchor='w') 