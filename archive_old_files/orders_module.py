# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ ERP —Å–∏—Å—Ç–µ–º—ã
"""

import tkinter as tk
from tkinter import ttk, messagebox

class OrdersModule:
    def __init__(self, parent_frame, database):
        self.parent = parent_frame
        self.db = database
        self.create_widgets()
        self.load_orders()
        
    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥—É–ª—è
        title_label = tk.Label(
            self.parent,
            text="–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò",
            font=('Arial', 16, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        title_label.pack(pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(self.parent, bg='white')
        buttons_frame.pack(fill='x', padx=20, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        add_btn = tk.Button(
            buttons_frame,
            text="üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑",
            command=self.show_add_order_dialog,
            bg='#9b59b6',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        add_btn.pack(side='left', padx=(0, 10))
        
        delete_btn = tk.Button(
            buttons_frame,
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑",
            command=self.delete_selected_order,
            bg='#e74c3c',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        delete_btn.pack(side='left', padx=(0, 10))
        
        refresh_btn = tk.Button(
            buttons_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self.load_orders,
            bg='#3498db',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        refresh_btn.pack(side='left')
        
        # –§—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_frame = tk.Frame(self.parent, bg='white')
        table_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
        columns = ('ID', '–ö–ª–∏–µ–Ω—Ç', '–°—É–º–º–∞', '–°—Ç–∞—Ç—É—Å', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
        self.orders_tree = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        self.orders_tree.heading('ID', text='‚Ññ –ó–∞–∫–∞–∑–∞')
        self.orders_tree.heading('–ö–ª–∏–µ–Ω—Ç', text='–ö–ª–∏–µ–Ω—Ç')
        self.orders_tree.heading('–°—É–º–º–∞', text='–°—É–º–º–∞ (‚ÇΩ)')
        self.orders_tree.heading('–°—Ç–∞—Ç—É—Å', text='–°—Ç–∞—Ç—É—Å')
        self.orders_tree.heading('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', text='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        self.orders_tree.column('ID', width=100)
        self.orders_tree.column('–ö–ª–∏–µ–Ω—Ç', width=200)
        self.orders_tree.column('–°—É–º–º–∞', width=120)
        self.orders_tree.column('–°—Ç–∞—Ç—É—Å', width=120)
        self.orders_tree.column('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', width=150)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(table_frame, orient='vertical', command=self.orders_tree.yview)
        self.orders_tree.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        self.orders_tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
    def load_orders(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.orders_tree.get_children():
            self.orders_tree.delete(item)
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        orders = self.db.get_all_orders()
        for order in orders:
            # order = (id, customer_name, total_amount, status, created_date)
            self.orders_tree.insert('', 'end', values=(
                f"#{order[0]:04d}", order[1], f"{order[2]:.2f}", 
                order[3], order[4]
            ))
            
    def show_add_order_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
        customers = self.db.get_all_customers()
        if not customers:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤.")
            return
            
        dialog = tk.Toplevel(self.parent)
        dialog.title("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
        dialog.geometry("500x400")
        dialog.resizable(False, False)
        dialog.configure(bg='white')
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        dialog.transient(self.parent.winfo_toplevel())
        dialog.grab_set()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            dialog,
            text="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞",
            font=('Arial', 14, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        title_label.pack(pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        fields_frame = tk.Frame(dialog, bg='white')
        fields_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
        client_label = tk.Label(fields_frame, text="–ö–ª–∏–µ–Ω—Ç:", bg='white', font=('Arial', 10))
        client_label.grid(row=0, column=0, sticky='w', pady=5)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        customer_dict = {f"{c[1]} (ID: {c[0]})": c[0] for c in customers}
        customer_names = list(customer_dict.keys())
        
        client_var = tk.StringVar()
        client_combo = ttk.Combobox(
            fields_frame, 
            textvariable=client_var,
            values=customer_names,
            state="readonly",
            width=35
        )
        client_combo.grid(row=0, column=1, sticky='ew', pady=5, padx=(10, 0))
        
        # –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞
        amount_label = tk.Label(fields_frame, text="–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (‚ÇΩ):", bg='white', font=('Arial', 10))
        amount_label.grid(row=1, column=0, sticky='w', pady=5)
        
        amount_var = tk.StringVar()
        amount_entry = tk.Entry(fields_frame, textvariable=amount_var, font=('Arial', 10), width=35)
        amount_entry.grid(row=1, column=1, sticky='ew', pady=5, padx=(10, 0))
        
        # –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        status_label = tk.Label(fields_frame, text="–°—Ç–∞—Ç—É—Å:", bg='white', font=('Arial', 10))
        status_label.grid(row=2, column=0, sticky='w', pady=5)
        
        status_var = tk.StringVar(value="–ù–æ–≤—ã–π")
        status_combo = ttk.Combobox(
            fields_frame, 
            textvariable=status_var,
            values=["–ù–æ–≤—ã–π", "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω", "–û—Ç–º–µ–Ω–µ–Ω"],
            state="readonly",
            width=32
        )
        status_combo.grid(row=2, column=1, sticky='ew', pady=5, padx=(10, 0))
        
        fields_frame.grid_columnconfigure(1, weight=1)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        info_label = tk.Label(
            dialog,
            text="üí° –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.",
            font=('Arial', 9),
            bg='white',
            fg='#7f8c8d',
            justify='center'
        )
        info_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(dialog, bg='white')
        buttons_frame.pack(fill='x', padx=20, pady=10)
        
        def save_order():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if not client_var.get() or not amount_var.get():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")
                return
                
            try:
                amount = float(amount_var.get())
                if amount <= 0:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
                    return
                    
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞!")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
            customer_id = customer_dict[client_var.get()]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
            order_id = self.db.add_order(customer_id, amount, status_var.get())
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞–∫–∞–∑ #{order_id:04d} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            dialog.destroy()
            self.load_orders()
                
        def cancel():
            dialog.destroy()
            
        save_btn = tk.Button(
            buttons_frame,
            text="–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑",
            command=save_order,
            bg='#9b59b6',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        save_btn.pack(side='left', padx=(0, 10))
        
        cancel_btn = tk.Button(
            buttons_frame,
            text="–û—Ç–º–µ–Ω–∞",
            command=cancel,
            bg='#95a5a6',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        cancel_btn.pack(side='left')
        
    def delete_selected_order(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑"""
        selected_item = self.orders_tree.selection()
        if not selected_item:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        order_data = self.orders_tree.item(selected_item[0])['values']
        order_number = order_data[0]
        order_id = int(order_number.replace('#', ''))
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ {order_number}?"):
            self.db.delete_order(order_id)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            self.load_orders() 