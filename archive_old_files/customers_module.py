# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏ ERP —Å–∏—Å—Ç–µ–º—ã
"""

import tkinter as tk
from tkinter import ttk, messagebox

class CustomersModule:
    def __init__(self, parent_frame, database):
        self.parent = parent_frame
        self.db = database
        self.create_widgets()
        self.load_customers()
        
    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥—É–ª—è
        title_label = tk.Label(
            self.parent,
            text="–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê–ú–ò",
            font=('Arial', 16, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        title_label.pack(pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(self.parent, bg='white')
        buttons_frame.pack(fill='x', padx=20, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        add_btn = tk.Button(
            buttons_frame,
            text="üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞",
            command=self.show_add_customer_dialog,
            bg='#e67e22',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        add_btn.pack(side='left', padx=(0, 10))
        
        delete_btn = tk.Button(
            buttons_frame,
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞",
            command=self.delete_selected_customer,
            bg='#e74c3c',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        delete_btn.pack(side='left', padx=(0, 10))
        
        refresh_btn = tk.Button(
            buttons_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self.load_customers,
            bg='#3498db',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        refresh_btn.pack(side='left')
        
        # –§—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_frame = tk.Frame(self.parent, bg='white')
        table_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–ª–∏–µ–Ω—Ç–æ–≤
        columns = ('ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', 'Email', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ê–¥—Ä–µ—Å', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
        self.customers_tree = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        self.customers_tree.heading('ID', text='ID')
        self.customers_tree.heading('–ù–∞–∑–≤–∞–Ω–∏–µ', text='–ù–∞–∑–≤–∞–Ω–∏–µ')
        self.customers_tree.heading('Email', text='Email')
        self.customers_tree.heading('–¢–µ–ª–µ—Ñ–æ–Ω', text='–¢–µ–ª–µ—Ñ–æ–Ω')
        self.customers_tree.heading('–ê–¥—Ä–µ—Å', text='–ê–¥—Ä–µ—Å')
        self.customers_tree.heading('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', text='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        self.customers_tree.column('ID', width=50)
        self.customers_tree.column('–ù–∞–∑–≤–∞–Ω–∏–µ', width=200)
        self.customers_tree.column('Email', width=150)
        self.customers_tree.column('–¢–µ–ª–µ—Ñ–æ–Ω', width=120)
        self.customers_tree.column('–ê–¥—Ä–µ—Å', width=200)
        self.customers_tree.column('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', width=120)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(table_frame, orient='vertical', command=self.customers_tree.yview)
        self.customers_tree.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        self.customers_tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
    def load_customers(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.customers_tree.get_children():
            self.customers_tree.delete(item)
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        customers = self.db.get_all_customers()
        for customer in customers:
            # customer = (id, name, email, phone, address, created_date)
            self.customers_tree.insert('', 'end', values=(
                customer[0], customer[1], customer[2], customer[3], 
                customer[4], customer[5]
            ))
            
    def show_add_customer_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        dialog = tk.Toplevel(self.parent)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
        dialog.geometry("450x300")
        dialog.resizable(False, False)
        dialog.configure(bg='white')
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        dialog.transient(self.parent.winfo_toplevel())
        dialog.grab_set()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            dialog,
            text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞",
            font=('Arial', 14, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        title_label.pack(pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        fields_frame = tk.Frame(dialog, bg='white')
        fields_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        fields = [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ:", tk.StringVar()),
            ("Email:", tk.StringVar()),
            ("–¢–µ–ª–µ—Ñ–æ–Ω:", tk.StringVar())
        ]
        
        entries = {}
        for i, (label_text, var) in enumerate(fields):
            label = tk.Label(fields_frame, text=label_text, bg='white', font=('Arial', 10))
            label.grid(row=i, column=0, sticky='w', pady=5)
            
            entry = tk.Entry(fields_frame, textvariable=var, font=('Arial', 10), width=25)
            entry.grid(row=i, column=1, sticky='ew', pady=5, padx=(10, 0))
            entries[label_text] = var
            
        # –ê–¥—Ä–µ—Å
        addr_label = tk.Label(fields_frame, text="–ê–¥—Ä–µ—Å:", bg='white', font=('Arial', 10))
        addr_label.grid(row=len(fields), column=0, sticky='nw', pady=5)
        
        addr_text = tk.Text(fields_frame, height=4, width=25, font=('Arial', 10))
        addr_text.grid(row=len(fields), column=1, sticky='ew', pady=5, padx=(10, 0))
        
        fields_frame.grid_columnconfigure(1, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(dialog, bg='white')
        buttons_frame.pack(fill='x', padx=20, pady=10)
        
        def save_customer():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if not entries["–ù–∞–∑–≤–∞–Ω–∏–µ:"].get():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞!")
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            self.db.add_customer(
                entries["–ù–∞–∑–≤–∞–Ω–∏–µ:"].get(),
                entries["Email:"].get(),
                entries["–¢–µ–ª–µ—Ñ–æ–Ω:"].get(),
                addr_text.get("1.0", tk.END).strip()
            )
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            dialog.destroy()
            self.load_customers()
                
        def cancel():
            dialog.destroy()
            
        save_btn = tk.Button(
            buttons_frame,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            command=save_customer,
            bg='#e67e22',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        save_btn.pack(side='left', padx=(0, 10))
        
        cancel_btn = tk.Button(
            buttons_frame,
            text="–û—Ç–º–µ–Ω–∞",
            command=cancel,
            bg='#95a5a6',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        cancel_btn.pack(side='left')
        
    def delete_selected_customer(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        selected_item = self.customers_tree.selection()
        if not selected_item:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        customer_data = self.customers_tree.item(selected_item[0])['values']
        customer_id = customer_data[0]
        customer_name = customer_data[1]
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ '{customer_name}'?"):
            self.db.delete_customer(customer_id)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            self.load_customers() 