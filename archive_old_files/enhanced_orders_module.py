# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ ERP —Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
"""

import tkinter as tk
from tkinter import ttk, messagebox

class EnhancedOrdersModule:
    def __init__(self, parent_frame, database):
        self.parent = parent_frame
        self.db = database
        self.create_widgets()
        self.load_orders()
        
    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥—É–ª—è
        title_label = tk.Label(
            self.parent,
            text="–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò (–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)",
            font=('Arial', 16, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        title_label.pack(pady=10)
        
        # –°–æ–∑–¥–∞–µ–º Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.parent)
        self.notebook.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"
        self.orders_frame = tk.Frame(self.notebook, bg='white')
        self.notebook.add(self.orders_frame, text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
        
        # –í–∫–ª–∞–¥–∫–∞ "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"
        self.create_order_frame = tk.Frame(self.notebook, bg='white')
        self.notebook.add(self.create_order_frame, text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫
        self.create_orders_list_tab()
        self.create_new_order_tab()
        
    def create_orders_list_tab(self):
        """–°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤"""
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(self.orders_frame, bg='white')
        buttons_frame.pack(fill='x', padx=20, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        view_btn = tk.Button(
            buttons_frame,
            text="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑",
            command=self.view_selected_order,
            bg='#3498db',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        view_btn.pack(side='left', padx=(0, 10))
        
        delete_btn = tk.Button(
            buttons_frame,
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑",
            command=self.delete_selected_order,
            bg='#e74c3c',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        delete_btn.pack(side='left', padx=(0, 10))
        
        refresh_btn = tk.Button(
            buttons_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self.load_orders,
            bg='#27ae60',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        refresh_btn.pack(side='left')
        
        # –ü–æ–∏—Å–∫
        search_frame = tk.Frame(buttons_frame, bg='white')
        search_frame.pack(side='right')
        
        tk.Label(search_frame, text="üîç –ü–æ–∏—Å–∫:", bg='white', font=('Arial', 10)).pack(side='left')
        
        self.search_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=self.search_var, width=20)
        search_entry.pack(side='left', padx=5)
        search_entry.bind('<KeyRelease>', self.filter_orders)
        
        # –§—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_frame = tk.Frame(self.orders_frame, bg='white')
        table_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
        columns = ('ID', '–ö–ª–∏–µ–Ω—Ç', '–ö–æ–ª-–≤–æ –ø–æ–∑–∏—Ü–∏–π', '–°—É–º–º–∞', '–°—Ç–∞—Ç—É—Å', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
        self.orders_tree = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        for col in columns:
            self.orders_tree.heading(col, text=col)
            
        self.orders_tree.column('ID', width=80)
        self.orders_tree.column('–ö–ª–∏–µ–Ω—Ç', width=200)
        self.orders_tree.column('–ö–æ–ª-–≤–æ –ø–æ–∑–∏—Ü–∏–π', width=120)
        self.orders_tree.column('–°—É–º–º–∞', width=120)
        self.orders_tree.column('–°—Ç–∞—Ç—É—Å', width=120)
        self.orders_tree.column('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', width=150)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(table_frame, orient='vertical', command=self.orders_tree.yview)
        h_scrollbar = ttk.Scrollbar(table_frame, orient='horizontal', command=self.orders_tree.xview)
        self.orders_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        self.orders_tree.grid(row=0, column=0, sticky='nsew')
        v_scrollbar.grid(row=0, column=1, sticky='ns')
        h_scrollbar.grid(row=1, column=0, sticky='ew')
        
        table_frame.grid_rowconfigure(0, weight=1)
        table_frame.grid_columnconfigure(0, weight=1)
        
    def create_new_order_tab(self):
        """–°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        canvas = tk.Canvas(self.create_order_frame, bg='white')
        scrollbar = ttk.Scrollbar(self.create_order_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg='white')
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        order_info_frame = tk.LabelFrame(scrollable_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ", bg='white', font=('Arial', 12, 'bold'))
        order_info_frame.pack(fill='x', padx=20, pady=10)
        
        # –í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
        client_frame = tk.Frame(order_info_frame, bg='white')
        client_frame.pack(fill='x', padx=10, pady=5)
        
        tk.Label(client_frame, text="–ö–ª–∏–µ–Ω—Ç:", bg='white', font=('Arial', 10, 'bold')).pack(side='left')
        
        self.client_var = tk.StringVar()
        self.client_combo = ttk.Combobox(client_frame, textvariable=self.client_var, state="readonly", width=40)
        self.client_combo.pack(side='left', padx=10)
        
        # –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        status_frame = tk.Frame(order_info_frame, bg='white')
        status_frame.pack(fill='x', padx=10, pady=5)
        
        tk.Label(status_frame, text="–°—Ç–∞—Ç—É—Å:", bg='white', font=('Arial', 10, 'bold')).pack(side='left')
        
        self.status_var = tk.StringVar(value="–ù–æ–≤—ã–π")
        status_combo = ttk.Combobox(
            status_frame,
            textvariable=self.status_var,
            values=["–ù–æ–≤—ã–π", "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω", "–û—Ç–º–µ–Ω–µ–Ω"],
            state="readonly",
            width=20
        )
        status_combo.pack(side='left', padx=10)
        
        # –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        items_frame = tk.LabelFrame(scrollable_frame, text="–ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞", bg='white', font=('Arial', 12, 'bold'))
        items_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        add_item_frame = tk.Frame(items_frame, bg='white')
        add_item_frame.pack(fill='x', padx=10, pady=5)
        
        tk.Label(add_item_frame, text="–¢–æ–≤–∞—Ä:", bg='white', font=('Arial', 10)).pack(side='left')
        
        self.product_var = tk.StringVar()
        self.product_combo = ttk.Combobox(add_item_frame, textvariable=self.product_var, state="readonly", width=30)
        self.product_combo.pack(side='left', padx=5)
        
        tk.Label(add_item_frame, text="–ö–æ–ª-–≤–æ:", bg='white', font=('Arial', 10)).pack(side='left', padx=(10, 0))
        
        self.quantity_var = tk.StringVar(value="1")
        quantity_entry = tk.Entry(add_item_frame, textvariable=self.quantity_var, width=10)
        quantity_entry.pack(side='left', padx=5)
        
        add_btn = tk.Button(
            add_item_frame,
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å",
            command=self.add_order_item,
            bg='#27ae60',
            fg='white',
            font=('Arial', 9, 'bold'),
            relief='flat'
        )
        add_btn.pack(side='left', padx=10)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞
        items_table_frame = tk.Frame(items_frame, bg='white')
        items_table_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        columns = ('–¢–æ–≤–∞—Ä', '–¶–µ–Ω–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—É–º–º–∞')
        self.items_tree = ttk.Treeview(items_table_frame, columns=columns, show='headings', height=8)
        
        for col in columns:
            self.items_tree.heading(col, text=col)
            self.items_tree.column(col, width=150)
        
        items_scrollbar = ttk.Scrollbar(items_table_frame, orient='vertical', command=self.items_tree.yview)
        self.items_tree.configure(yscrollcommand=items_scrollbar.set)
        
        self.items_tree.pack(side='left', fill='both', expand=True)
        items_scrollbar.pack(side='right', fill='y')
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
        remove_item_btn = tk.Button(
            items_frame,
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é",
            command=self.remove_order_item,
            bg='#e74c3c',
            fg='white',
            font=('Arial', 9, 'bold'),
            relief='flat'
        )
        remove_item_btn.pack(pady=5)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        total_frame = tk.Frame(scrollable_frame, bg='#ecf0f1', relief='raised', bd=2)
        total_frame.pack(fill='x', padx=20, pady=10)
        
        self.total_label = tk.Label(
            total_frame,
            text="–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: 0.00 ‚ÇΩ",
            font=('Arial', 14, 'bold'),
            bg='#ecf0f1',
            fg='#2c3e50'
        )
        self.total_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
        buttons_frame = tk.Frame(scrollable_frame, bg='white')
        buttons_frame.pack(fill='x', padx=20, pady=20)
        
        create_btn = tk.Button(
            buttons_frame,
            text="üíæ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑",
            command=self.create_order,
            bg='#9b59b6',
            fg='white',
            font=('Arial', 12, 'bold'),
            relief='flat',
            cursor='hand2',
            pady=10
        )
        create_btn.pack(side='left', padx=(0, 10))
        
        clear_btn = tk.Button(
            buttons_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É",
            command=self.clear_order_form,
            bg='#95a5a6',
            fg='white',
            font=('Arial', 12, 'bold'),
            relief='flat',
            cursor='hand2',
            pady=10
        )
        clear_btn.pack(side='left')
        
        # –†–∞–∑–º–µ—â–∞–µ–º canvas –∏ scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–æ–≤
        self.load_form_data()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞
        self.order_items = []
        
    def load_form_data(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–æ–≤"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        customers = self.db.get_all_customers()
        customer_list = [f"{c[1]} (ID: {c[0]})" for c in customers]
        self.client_combo['values'] = customer_list
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        products = self.db.get_all_products()
        product_list = [f"{p[1]} - {p[3]:.2f} ‚ÇΩ (–æ—Å—Ç–∞—Ç–æ–∫: {p[4]}) (ID: {p[0]})" for p in products if p[4] > 0]
        self.product_combo['values'] = product_list
        
    def add_order_item(self):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ –∑–∞–∫–∞–∑"""
        if not self.product_var.get() or not self.quantity_var.get():
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!")
            return
            
        try:
            quantity = int(self.quantity_var.get())
            if quantity <= 0:
                raise ValueError()
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        product_text = self.product_var.get()
        product_id = int(product_text.split("(ID: ")[1].split(")")[0])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT name, price, quantity FROM products WHERE id = ?", (product_id,))
        product = cursor.fetchone()
        conn.close()
        
        if not product:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        if product[2] < quantity:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ! –î–æ—Å—Ç—É–ø–Ω–æ: {product[2]}")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ
        for item in self.order_items:
            if item['product_id'] == product_id:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑!")
                return
                
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        item = {
            'product_id': product_id,
            'name': product[0],
            'price': product[1],
            'quantity': quantity,
            'total': product[1] * quantity
        }
        
        self.order_items.append(item)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–∑–∏—Ü–∏–π
        self.update_items_table()
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª—è
        self.product_var.set("")
        self.quantity_var.set("1")
        
    def remove_order_item(self):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ –∑–∞–∫–∞–∑–∞"""
        selected = self.items_tree.selection()
        if not selected:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        item_index = self.items_tree.index(selected[0])
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        del self.order_items[item_index]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.update_items_table()
        
    def update_items_table(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.items_tree.get_children():
            self.items_tree.delete(item)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        total_sum = 0
        for item in self.order_items:
            self.items_tree.insert('', 'end', values=(
                item['name'],
                f"{item['price']:.2f} ‚ÇΩ",
                item['quantity'],
                f"{item['total']:.2f} ‚ÇΩ"
            ))
            total_sum += item['total']
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        self.total_label.config(text=f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_sum:.2f} ‚ÇΩ")
        
    def create_order(self):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"""
        if not self.client_var.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞!")
            return
            
        if not self.order_items:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –≤ –∑–∞–∫–∞–∑!")
            return
            
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
            client_text = self.client_var.get()
            client_id = int(client_text.split("(ID: ")[1].split(")")[0])
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
            total_amount = sum(item['total'] for item in self.order_items)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order_id = self.db.add_order(client_id, total_amount, self.status_var.get())
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
            conn = self.db.get_connection()
            cursor = conn.cursor()
            
            for item in self.order_items:
                cursor.execute('''
                    INSERT INTO order_items (order_id, product_id, quantity, price)
                    VALUES (?, ?, ?, ?)
                ''', (order_id, item['product_id'], item['quantity'], item['price']))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
                cursor.execute('''
                    UPDATE products 
                    SET quantity = quantity - ? 
                    WHERE id = ?
                ''', (item['quantity'], item['product_id']))
                
            conn.commit()
            conn.close()
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞–∫–∞–∑ #{order_id:04d} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            
            # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            self.clear_order_form()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
            self.load_orders()
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
            self.notebook.select(0)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑: {e}")
            
    def clear_order_form(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        self.client_var.set("")
        self.status_var.set("–ù–æ–≤—ã–π")
        self.product_var.set("")
        self.quantity_var.set("1")
        self.order_items = []
        self.update_items_table()
        
    def load_orders(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.orders_tree.get_children():
            self.orders_tree.delete(item)
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT o.id, c.name, 
                   COUNT(oi.id) as items_count,
                   o.total_amount, o.status, o.created_date 
            FROM orders o
            JOIN customers c ON o.customer_id = c.id
            LEFT JOIN order_items oi ON o.id = oi.order_id
            GROUP BY o.id, c.name, o.total_amount, o.status, o.created_date
            ORDER BY o.created_date DESC
        ''')
        orders = cursor.fetchall()
        conn.close()
        
        for order in orders:
            self.orders_tree.insert('', 'end', values=(
                f"#{order[0]:04d}",
                order[1],
                order[2] if order[2] else 0,
                f"{order[3]:.2f} ‚ÇΩ",
                order[4],
                order[5]
            ))
            
    def filter_orders(self, event=None):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        query = self.search_var.get().lower()
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.orders_tree.get_children():
            self.orders_tree.delete(item)
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT o.id, c.name, 
                   COUNT(oi.id) as items_count,
                   o.total_amount, o.status, o.created_date 
            FROM orders o
            JOIN customers c ON o.customer_id = c.id
            LEFT JOIN order_items oi ON o.id = oi.order_id
            GROUP BY o.id, c.name, o.total_amount, o.status, o.created_date
            ORDER BY o.created_date DESC
        ''')
        orders = cursor.fetchall()
        conn.close()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
        for order in orders:
            if (query in order[1].lower() or 
                query in order[4].lower() or 
                query in f"#{order[0]:04d}".lower()):
                self.orders_tree.insert('', 'end', values=(
                    f"#{order[0]:04d}",
                    order[1],
                    order[2] if order[2] else 0,
                    f"{order[3]:.2f} ‚ÇΩ",
                    order[4],
                    order[5]
                ))
                
    def view_selected_order(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        selected = self.orders_tree.selection()
        if not selected:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
        order_data = self.orders_tree.item(selected[0])['values']
        order_id = int(order_data[0].replace('#', ''))
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞
        self.show_order_details(order_id)
        
    def show_order_details(self, order_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
        details_window = tk.Toplevel(self.parent)
        details_window.title(f"–ó–∞–∫–∞–∑ #{order_id:04d}")
        details_window.geometry("700x500")
        details_window.configure(bg='white')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        cursor.execute('''
            SELECT o.*, c.name as customer_name, c.email, c.phone, c.address
            FROM orders o
            JOIN customers c ON o.customer_id = c.id
            WHERE o.id = ?
        ''', (order_id,))
        order = cursor.fetchone()
        
        # –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        cursor.execute('''
            SELECT oi.*, p.name as product_name
            FROM order_items oi
            JOIN products p ON oi.product_id = p.id
            WHERE oi.order_id = ?
        ''', (order_id,))
        items = cursor.fetchall()
        
        conn.close()
        
        if not order:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            details_window,
            text=f"–ó–ê–ö–ê–ó #{order_id:04d}",
            font=('Arial', 16, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        title_label.pack(pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –∏ –∫–ª–∏–µ–Ω—Ç–µ
        info_frame = tk.Frame(details_window, bg='#ecf0f1', relief='raised', bd=2)
        info_frame.pack(fill='x', padx=20, pady=10)
        
        info_text = f"""
–ö–ª–∏–µ–Ω—Ç: {order[7]}
Email: {order[8] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
–¢–µ–ª–µ—Ñ–æ–Ω: {order[9] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
–ê–¥—Ä–µ—Å: {order[10] or '–ù–µ —É–∫–∞–∑–∞–Ω'}

–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order[3]}
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order[4]}
–û–±—â–∞—è —Å—É–º–º–∞: {order[2]:.2f} ‚ÇΩ
        """
        
        info_label = tk.Label(
            info_frame,
            text=info_text,
            font=('Arial', 10),
            bg='#ecf0f1',
            fg='#2c3e50',
            justify='left'
        )
        info_label.pack(padx=20, pady=15)
        
        # –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        items_label = tk.Label(
            details_window,
            text="–ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞:",
            font=('Arial', 12, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        items_label.pack(anchor='w', padx=20, pady=(10, 5))
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
        items_frame = tk.Frame(details_window, bg='white')
        items_frame.pack(fill='both', expand=True, padx=20, pady=(0, 20))
        
        columns = ('–¢–æ–≤–∞—Ä', '–¶–µ–Ω–∞ –∑–∞ –µ–¥.', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—É–º–º–∞')
        items_tree = ttk.Treeview(items_frame, columns=columns, show='headings')
        
        for col in columns:
            items_tree.heading(col, text=col)
            items_tree.column(col, width=150)
            
        for item in items:
            items_tree.insert('', 'end', values=(
                item[5],  # product_name
                f"{item[4]:.2f} ‚ÇΩ",  # price
                item[3],  # quantity
                f"{item[3] * item[4]:.2f} ‚ÇΩ"  # total
            ))
            
        items_tree.pack(fill='both', expand=True)
        
    def delete_selected_order(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑"""
        selected = self.orders_tree.selection()
        if not selected:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        order_data = self.orders_tree.item(selected[0])['values']
        order_number = order_data[0]
        order_id = int(order_number.replace('#', ''))
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ {order_number}?"):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
            conn = self.db.get_connection()
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
            cursor.execute('''
                SELECT product_id, quantity 
                FROM order_items 
                WHERE order_id = ?
            ''', (order_id,))
            items = cursor.fetchall()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
            for item in items:
                cursor.execute('''
                    UPDATE products 
                    SET quantity = quantity + ? 
                    WHERE id = ?
                ''', (item[1], item[0]))
                
            conn.commit()
            conn.close()
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ (–ø–æ–∑–∏—Ü–∏–∏ —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ foreign key)
            self.db.delete_order(order_id)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω, —Ç–æ–≤–∞—Ä—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥!")
            self.load_orders() 