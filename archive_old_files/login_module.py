# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ERP —Å–∏—Å—Ç–µ–º—ã
"""

import tkinter as tk
from tkinter import ttk, messagebox
import hashlib

class LoginWindow:
    def __init__(self, database, callback):
        self.db = database
        self.callback = callback
        self.current_user = None
        self.root = tk.Tk()
        self.root.title("–í—Ö–æ–¥ –≤ ERP —Å–∏—Å—Ç–µ–º—É")
        self.root.geometry("400x300")
        self.root.resizable(False, False)
        self.root.configure(bg='#2c3e50')
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        self.create_widgets()
        
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        try:
            self.root.update_idletasks()
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            self.root.geometry("400x300+200+200")
        except:
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–æ—Å—Ç–æ –Ω–µ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
            pass
        
    def create_widgets(self):
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = tk.Frame(self.root, bg='#2c3e50')
        main_frame.pack(fill='both', expand=True, padx=40, pady=40)
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            main_frame,
            text="üè¢ ERP –°–ò–°–¢–ï–ú–ê",
            font=('Arial', 20, 'bold'),
            bg='#2c3e50',
            fg='white'
        )
        title_label.pack(pady=(0, 10))
        
        subtitle_label = tk.Label(
            main_frame,
            text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            font=('Arial', 12),
            bg='#2c3e50',
            fg='#bdc3c7'
        )
        subtitle_label.pack(pady=(0, 30))
        
        # –§—Ä–µ–π–º –¥–ª—è —Ñ–æ—Ä–º—ã
        form_frame = tk.Frame(main_frame, bg='white', relief='raised', bd=2)
        form_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã
        form_title = tk.Label(
            form_frame,
            text="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
            font=('Arial', 14, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        form_title.pack(pady=15)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        fields_frame = tk.Frame(form_frame, bg='white')
        fields_frame.pack(fill='x', padx=20, pady=10)
        
        # –õ–æ–≥–∏–Ω
        login_label = tk.Label(
            fields_frame,
            text="–õ–æ–≥–∏–Ω:",
            font=('Arial', 10, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        login_label.pack(anchor='w', pady=(5, 0))
        
        self.login_var = tk.StringVar()
        self.login_entry = tk.Entry(
            fields_frame,
            textvariable=self.login_var,
            font=('Arial', 12),
            relief='solid',
            bd=1,
            width=25
        )
        self.login_entry.pack(pady=(5, 15), ipady=5)
        
        # –ü–∞—Ä–æ–ª—å
        password_label = tk.Label(
            fields_frame,
            text="–ü–∞—Ä–æ–ª—å:",
            font=('Arial', 10, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        password_label.pack(anchor='w', pady=(5, 0))
        
        self.password_var = tk.StringVar()
        self.password_entry = tk.Entry(
            fields_frame,
            textvariable=self.password_var,
            font=('Arial', 12),
            show="*",
            relief='solid',
            bd=1,
            width=25
        )
        self.password_entry.pack(pady=(5, 20), ipady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
        login_btn = tk.Button(
            fields_frame,
            text="üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É",
            command=self.authenticate_user,
            bg='#27ae60',
            fg='white',
            font=('Arial', 12, 'bold'),
            relief='flat',
            cursor='hand2',
            pady=8
        )
        login_btn.pack(pady=10, fill='x')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        info_frame = tk.Frame(form_frame, bg='#ecf0f1', relief='sunken', bd=1)
        info_frame.pack(fill='x', padx=20, pady=(0, 15))
        
        info_label = tk.Label(
            info_frame,
            text="üí° –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
            font=('Arial', 9, 'bold'),
            bg='#ecf0f1',
            fg='#2c3e50'
        )
        info_label.pack(pady=(5, 0))
        
        users_info = [
            "admin / admin123 (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)",
            "manager / manager123 (–ú–µ–Ω–µ–¥–∂–µ—Ä)", 
            "operator / operator123 (–û–ø–µ—Ä–∞—Ç–æ—Ä)"
        ]
        
        for user_info in users_info:
            user_label = tk.Label(
                info_frame,
                text=user_info,
                font=('Arial', 8),
                bg='#ecf0f1',
                fg='#7f8c8d'
            )
            user_label.pack()
            
        tk.Label(info_frame, text="", bg='#ecf0f1').pack(pady=2)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter –∫ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞
        self.root.bind('<Return>', lambda e: self.authenticate_user())
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ª–æ–≥–∏–Ω–∞
        self.login_entry.focus()
        
    def hash_password(self, password):
        """–•–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å"""
        return hashlib.sha256(password.encode()).hexdigest()
        
    def authenticate_user(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        username = self.login_var.get().strip()
        password = self.password_var.get().strip()
        
        if not username or not password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, username, password, full_name, role, email 
            FROM users 
            WHERE username = ?
        """, (username,))
        
        user = cursor.fetchone()
        conn.close()
        
        if user and user[2] == password:  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å)
            self.current_user = {
                'id': user[0],
                'username': user[1],
                'full_name': user[3],
                'role': user[4],
                'email': user[5]
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥
            self.log_user_action("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user[3]}!")
            self.root.destroy()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.callback(self.current_user)
            
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!")
            self.password_var.set("")  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
            
    def log_user_action(self, action):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.current_user:
            import datetime
            conn = self.db.get_connection()
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_logs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    action TEXT,
                    timestamp TEXT,
                    FOREIGN KEY (user_id) REFERENCES users (id)
                )
            ''')
            
            cursor.execute('''
                INSERT INTO user_logs (user_id, username, action, timestamp)
                VALUES (?, ?, ?, ?)
            ''', (
                self.current_user['id'],
                self.current_user['username'],
                action,
                datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            ))
            
            conn.commit()
            conn.close()
            
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.root.mainloop()
        return self.current_user 