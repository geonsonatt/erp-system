# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ ERP —Å–∏—Å—Ç–µ–º—ã
"""

import tkinter as tk
from tkinter import ttk, messagebox

class ProductsModule:
    def __init__(self, parent_frame, database):
        self.parent = parent_frame
        self.db = database
        self.create_widgets()
        self.load_products()
        
    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥—É–ª—è
        title_label = tk.Label(
            self.parent,
            text="–£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò",
            font=('Arial', 16, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        title_label.pack(pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(self.parent, bg='white')
        buttons_frame.pack(fill='x', padx=20, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        add_btn = tk.Button(
            buttons_frame,
            text="üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä",
            command=self.show_add_product_dialog,
            bg='#27ae60',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        add_btn.pack(side='left', padx=(0, 10))
        
        delete_btn = tk.Button(
            buttons_frame,
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä",
            command=self.delete_selected_product,
            bg='#e74c3c',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        delete_btn.pack(side='left', padx=(0, 10))
        
        refresh_btn = tk.Button(
            buttons_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self.load_products,
            bg='#3498db',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        refresh_btn.pack(side='left')
        
        # –ü–æ–∏—Å–∫
        search_frame = tk.Frame(buttons_frame, bg='white')
        search_frame.pack(side='right')
        
        tk.Label(search_frame, text="üîç –ü–æ–∏—Å–∫:", bg='white', font=('Arial', 10)).pack(side='left')
        
        self.search_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=self.search_var, width=25)
        search_entry.pack(side='left', padx=5)
        search_entry.bind('<KeyRelease>', self.filter_products)
        
        # –§—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_frame = tk.Frame(self.parent, bg='white')
        table_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤
        columns = ('ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
        self.products_tree = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        self.products_tree.heading('ID', text='ID')
        self.products_tree.heading('–ù–∞–∑–≤–∞–Ω–∏–µ', text='–ù–∞–∑–≤–∞–Ω–∏–µ')
        self.products_tree.heading('–û–ø–∏—Å–∞–Ω–∏–µ', text='–û–ø–∏—Å–∞–Ω–∏–µ')
        self.products_tree.heading('–¶–µ–Ω–∞', text='–¶–µ–Ω–∞ (‚ÇΩ)')
        self.products_tree.heading('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', text='–ö–æ–ª-–≤–æ')
        self.products_tree.heading('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
        self.products_tree.heading('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', text='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        self.products_tree.column('ID', width=50)
        self.products_tree.column('–ù–∞–∑–≤–∞–Ω–∏–µ', width=150)
        self.products_tree.column('–û–ø–∏—Å–∞–Ω–∏–µ', width=200)
        self.products_tree.column('–¶–µ–Ω–∞', width=100)
        self.products_tree.column('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', width=80)
        self.products_tree.column('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', width=120)
        self.products_tree.column('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', width=120)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(table_frame, orient='vertical', command=self.products_tree.yview)
        self.products_tree.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        self.products_tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
    def load_products(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.products_tree.get_children():
            self.products_tree.delete(item)
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        products = self.db.get_all_products()
        for product in products:
            # product = (id, name, description, price, quantity, category, created_date)
            self.products_tree.insert('', 'end', values=(
                product[0], product[1], product[2], f"{product[3]:.2f}", 
                product[4], product[5], product[6]
            ))
            
    def show_add_product_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        dialog = tk.Toplevel(self.parent)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        dialog.geometry("450x350")
        dialog.resizable(False, False)
        dialog.configure(bg='white')
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        dialog.transient(self.parent.winfo_toplevel())
        dialog.grab_set()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            dialog,
            text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",
            font=('Arial', 14, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        title_label.pack(pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        fields_frame = tk.Frame(dialog, bg='white')
        fields_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        fields = [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ:", tk.StringVar()),
            ("–¶–µ–Ω–∞ (‚ÇΩ):", tk.StringVar()),
            ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:", tk.StringVar())
        ]
        
        entries = {}
        for i, (label_text, var) in enumerate(fields):
            label = tk.Label(fields_frame, text=label_text, bg='white', font=('Arial', 10))
            label.grid(row=i, column=0, sticky='w', pady=5)
            
            entry = tk.Entry(fields_frame, textvariable=var, font=('Arial', 10), width=25)
            entry.grid(row=i, column=1, sticky='ew', pady=5, padx=(10, 0))
            entries[label_text] = var
            
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_label = tk.Label(fields_frame, text="–û–ø–∏—Å–∞–Ω–∏–µ:", bg='white', font=('Arial', 10))
        desc_label.grid(row=len(fields), column=0, sticky='nw', pady=5)
        
        desc_text = tk.Text(fields_frame, height=4, width=25, font=('Arial', 10))
        desc_text.grid(row=len(fields), column=1, sticky='ew', pady=5, padx=(10, 0))
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        cat_label = tk.Label(fields_frame, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", bg='white', font=('Arial', 10))
        cat_label.grid(row=len(fields)+1, column=0, sticky='w', pady=5)
        
        cat_var = tk.StringVar(value="–û–±—â–∏–µ")
        cat_combo = ttk.Combobox(
            fields_frame, 
            textvariable=cat_var,
            values=["–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", "–û—Ä–≥—Ç–µ—Ö–Ω–∏–∫–∞", "–ú–µ–±–µ–ª—å", "–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã", "–û–±—â–∏–µ"],
            width=22
        )
        cat_combo.grid(row=len(fields)+1, column=1, sticky='ew', pady=5, padx=(10, 0))
        
        fields_frame.grid_columnconfigure(1, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(dialog, bg='white')
        buttons_frame.pack(fill='x', padx=20, pady=10)
        
        def save_product():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if not entries["–ù–∞–∑–≤–∞–Ω–∏–µ:"].get() or not entries["–¶–µ–Ω–∞ (‚ÇΩ):"].get() or not entries["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:"].get():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")
                return
                
            try:
                price = float(entries["–¶–µ–Ω–∞ (‚ÇΩ):"].get())
                quantity = int(entries["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:"].get())
                
                if price < 0 or quantity < 0:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–¶–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏!")
                    return
                    
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞!")
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
            self.db.add_product(
                entries["–ù–∞–∑–≤–∞–Ω–∏–µ:"].get(),
                desc_text.get("1.0", tk.END).strip(),
                price,
                quantity,
                cat_var.get()
            )
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            dialog.destroy()
            self.load_products()
                
        def cancel():
            dialog.destroy()
            
        save_btn = tk.Button(
            buttons_frame,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            command=save_product,
            bg='#27ae60',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        save_btn.pack(side='left', padx=(0, 10))
        
        cancel_btn = tk.Button(
            buttons_frame,
            text="–û—Ç–º–µ–Ω–∞",
            command=cancel,
            bg='#95a5a6',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            cursor='hand2'
        )
        cancel_btn.pack(side='left')
        
    def delete_selected_product(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä"""
        selected_item = self.products_tree.selection()
        if not selected_item:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        product_data = self.products_tree.item(selected_item[0])['values']
        product_id = product_data[0]
        product_name = product_data[1]
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä '{product_name}'?"):
            self.db.delete_product(product_id)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            self.load_products() 

    def filter_products(self, event=None):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É"""
        query = self.search_var.get().lower()
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.products_tree.get_children():
            self.products_tree.delete(item)
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        products = self.db.get_all_products()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
        for product in products:
            if (query in product[1].lower() or  # –Ω–∞–∑–≤–∞–Ω–∏–µ
                query in (product[2] or '').lower() or  # –æ–ø–∏—Å–∞–Ω–∏–µ
                query in (product[5] or '').lower()):  # –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                self.products_tree.insert('', 'end', values=(
                    product[0], product[1], product[2], f"{product[3]:.2f}", 
                    product[4], product[5], product[6]
                )) 