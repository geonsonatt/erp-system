#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ERP —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import sqlite3
from database import Database

def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        db = Database()
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        conn.close()
        
        expected_tables = ['users', 'products', 'customers', 'orders', 'order_items']
        found_tables = [table[0] for table in tables]
        
        for table in expected_tables:
            if table in found_tables:
                print(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table}' –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print(f"  ‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table}' –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
                
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_users_data():
    """–¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\nüë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    try:
        db = Database()
        users = db.get_all_users()
        
        if len(users) >= 3:
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            for user in users:
                print(f"    - {user[1]} ({user[4]}) - {user[3]}")
        else:
            print(f"  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_products_data():
    """–¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...")
    try:
        db = Database()
        products = db.get_all_products()
        
        if len(products) >= 3:
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            for product in products[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"    - {product[1]} - {product[3]:.2f} ‚ÇΩ (–æ—Å—Ç–∞—Ç–æ–∫: {product[4]})")
        else:
            print(f"  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_customers_data():
    """–¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    try:
        db = Database()
        customers = db.get_all_customers()
        
        if len(customers) >= 2:
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(customers)}")
            for customer in customers:
                print(f"    - {customer[1]} ({customer[2]})")
        else:
            print(f"  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(customers)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
            
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_orders_data():
    """–¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤...")
    try:
        db = Database()
        orders = db.get_all_orders()
        
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")
        if len(orders) > 0:
            for order in orders:
                print(f"    - –ó–∞–∫–∞–∑ #{order[0]:04d}: {order[1]} - {order[2]:.2f} ‚ÇΩ ({order[3]})")
                
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_statistics():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    try:
        db = Database()
        
        total_sales = db.get_total_sales()
        total_products = db.get_total_products()
        total_customers = db.get_total_customers()
        total_orders = db.get_total_orders()
        
        print(f"  ‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {total_sales:.2f} ‚ÇΩ")
        print(f"  ‚úÖ –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {total_products}")
        print(f"  ‚úÖ –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {total_customers}")
        print(f"  ‚úÖ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}")
        
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ERP –°–ò–°–¢–ï–ú–´ v2.0")
    print("=" * 50)
    
    tests = [
        test_database_connection,
        test_users_data,
        test_products_data,
        test_customers_data,
        test_orders_data,
        test_statistics
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            if test():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            failed += 1
            
    print("\n" + "=" * 50)
    print(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}")
    print(f"  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {failed}")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üí° ERP —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ {failed} —Ç–µ—Å—Ç–∞—Ö")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        
    print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python3 main.py")

if __name__ == "__main__":
    main() 