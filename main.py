#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è ERP —Å–∏—Å—Ç–µ–º–∞ v3.0 –Ω–∞ Tkinter —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite.
–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–æ–≤–∞—Ä–æ–≤, –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤.
"""

import tkinter as tk
from tkinter import messagebox, ttk, simpledialog
import sqlite3
from datetime import datetime

DB_NAME = 'erp_database.db'


class Database:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."""

    def __init__(self, db_name=DB_NAME):
        self.db_name = db_name
        self.conn = None
        self.init_database()

    def connect(self):
        if not self.conn:
            self.conn = sqlite3.connect(self.db_name)
        return self.conn

    def init_database(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
        try:
            conn = self.connect()
            cursor = conn.cursor()
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT UNIQUE NOT NULL,
                    full_name TEXT NOT NULL,
                    role TEXT NOT NULL,
                    email TEXT UNIQUE,
                    password TEXT NOT NULL,
                    created_at TEXT NOT NULL
                )
            """)
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    price REAL NOT NULL DEFAULT 0,
                    quantity INTEGER NOT NULL DEFAULT 0,
                    category TEXT,
                    created_at TEXT NOT NULL
                )
            """)
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS customers (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    email TEXT UNIQUE,
                    phone TEXT,
                    address TEXT,
                    created_at TEXT NOT NULL
                )
            """)
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    customer_id INTEGER NOT NULL,
                    total_amount REAL NOT NULL DEFAULT 0,
                    status TEXT NOT NULL,
                    created_date TEXT NOT NULL,
                    FOREIGN KEY(customer_id) REFERENCES customers(id)
                )
            """)
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—É–Ω–∫—Ç–æ–≤ –∑–∞–∫–∞–∑–∞ (OrderItems)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS order_items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER NOT NULL,
                    product_id INTEGER NOT NULL,
                    quantity INTEGER NOT NULL DEFAULT 1,
                    price REAL NOT NULL DEFAULT 0,
                    FOREIGN KEY(order_id) REFERENCES orders(id),
                    FOREIGN KEY(product_id) REFERENCES products(id)
                )
            """)
            conn.commit()
            # –ï—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞ - —Å–æ–∑–¥–∞–¥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            cursor.execute("SELECT COUNT(*) FROM users")
            if cursor.fetchone()[0] == 0:
                now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                cursor.execute("""
                    INSERT INTO users (username, full_name, role, email, password, created_at)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, ("admin", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "admin@example.com", "admin123", now))
                conn.commit()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

    def fetch_all(self, table, order_by=None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã."""
        try:
            cursor = self.connect().cursor()
            query = f"SELECT * FROM {table}"
            if order_by:
                query += f" ORDER BY {order_by}"
            cursor.execute(query)
            return cursor.fetchall()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ë–î", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ {table}: {e}")
            return []

    def insert(self, table, columns, values):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É. columns –∏ values ‚Äî —Å–ø–∏—Å–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã."""
        try:
            cursor = self.connect().cursor()
            cols = ", ".join(columns)
            placeholders = ", ".join("?" for _ in values)
            query = f"INSERT INTO {table} ({cols}) VALUES ({placeholders})"
            cursor.execute(query, values)
            self.conn.commit()
            return cursor.lastrowid
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ë–î", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ {table}: {e}")
            return None

    def update(self, table, record_id, columns, values):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ id. columns –∏ values ‚Äî —Å–ø–∏—Å–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã."""
        try:
            cursor = self.connect().cursor()
            set_clause = ", ".join(f"{col}=?" for col in columns)
            query = f"UPDATE {table} SET {set_clause} WHERE id=?"
            cursor.execute(query, values + [record_id])
            self.conn.commit()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ë–î", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ {table}: {e}")

    def delete(self, table, record_id):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ id."""
        try:
            cursor = self.connect().cursor()
            query = f"DELETE FROM {table} WHERE id=?"
            cursor.execute(query, (record_id,))
            self.conn.commit()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ë–î", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ {table}: {e}")


class SimpleERP:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å ERP –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç –µ–≥–æ —Å –ë–î."""

    def __init__(self):
        self.db = Database()
        self.root = tk.Tk()
        self.root.title("üíº ERP –°–∏—Å—Ç–µ–º–∞ v3.0")
        self.root.geometry("900x650")
        self.root.configure(bg='#f0f0f0')

        # –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é admin)
        self.current_user = self.get_default_user()

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_interface()

    def get_default_user(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (admin) –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
        users = self.db.fetch_all('users', order_by="id LIMIT 1")
        if users:
            uid, username, full_name, role, email, _, _ = users[0]
            return {
                'id': uid,
                'username': username,
                'full_name': full_name,
                'role': role,
                'email': email
            }
        return {
            'id': None, 'username': 'guest', 'full_name': '–ì–æ—Å—Ç—å', 'role': '–ì–æ—Å—Ç—å', 'email': ''
        }

    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

        # –®–∞–ø–∫–∞
        header_frame = tk.Frame(self.root, bg='#2c3e50', height=80)
        header_frame.pack(fill='x')
        header_frame.pack_propagate(False)
        title_label = tk.Label(
            header_frame,
            text="üè¢ ERP –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ï–î–ü–†–ò–Ø–¢–ò–ï–ú v3.0",
            font=('Arial', 18, 'bold'),
            bg='#2c3e50',
            fg='white'
        )
        title_label.pack(expand=True)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
        user_frame = tk.Frame(self.root, bg='#34495e', height=40)
        user_frame.pack(fill='x')
        user_frame.pack_propagate(False)
        self.user_info_label = tk.Label(
            user_frame,
            text="",
            font=('Arial', 10),
            bg='#34495e',
            fg='white'
        )
        self.user_info_label.pack(pady=8)
        self.update_user_info()

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ –º–æ–¥—É–ª–µ–π
        buttons_frame = tk.Frame(self.root, bg='#f0f0f0')
        buttons_frame.pack(fill='x', padx=20, pady=15)
        modules = [
            ("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", self.show_users, '#3498db'),
            ("üì¶ –¢–æ–≤–∞—Ä—ã", self.show_products, '#27ae60'),
            ("üë§ –ö–ª–∏–µ–Ω—Ç—ã", self.show_customers, '#e67e22'),
            ("üìã –ó–∞–∫–∞–∑—ã", self.show_orders, '#9b59b6'),
            ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", self.show_stats, '#34495e'),
            ("‚ùå –í—ã—Ö–æ–¥", self.exit_app, '#e74c3c')
        ]
        for i, (text, command, color) in enumerate(modules):
            btn = tk.Button(
                buttons_frame,
                text=text,
                command=command,
                font=('Arial', 11, 'bold'),
                bg=color,
                fg='white',
                relief='flat',
                width=14,
                height=2
            )
            row = i // 3
            col = i % 3
            btn.grid(row=row, column=col, padx=8, pady=5, sticky='ew')
            buttons_frame.grid_columnconfigure(col, weight=1)

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π
        self.content_frame = tk.Frame(self.root, bg='white', relief='sunken', bd=2)
        self.content_frame.pack(fill='both', expand=True, padx=20, pady=(0, 20))
        self.show_welcome()

    def update_user_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        text = f"üë§ {self.current_user['full_name']} | {self.current_user['role']} | –í—Ä–µ–º—è: {now}"
        self.user_info_label.config(text=text)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 1 —Å–µ–∫—É–Ω–¥—É
        self.root.after(1000, self.update_user_info)

    def clear_content(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –∏–∑ content_frame."""
        for widget in self.content_frame.winfo_children():
            widget.destroy()

    def show_welcome(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
        self.clear_content()
        welcome_label = tk.Label(
            self.content_frame,
            text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ERP —Å–∏—Å—Ç–µ–º—É, {self.current_user['full_name']}!",
            font=('Arial', 20, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        welcome_label.pack(pady=40)

        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {}
        stats['users'] = len(self.db.fetch_all('users'))
        stats['products'] = len(self.db.fetch_all('products'))
        stats['customers'] = len(self.db.fetch_all('customers'))
        stats['orders'] = len(self.db.fetch_all('orders'))
        cursor = self.db.connect().cursor()
        cursor.execute("SELECT SUM(total_amount) FROM orders")
        stats['total_sales'] = cursor.fetchone()[0] or 0

        stats_text = (
            f"üìä –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´:\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
            f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {stats['products']}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç–æ–≤: {stats['customers']}\n"
            f"üìã –ó–∞–∫–∞–∑–æ–≤: {stats['orders']}\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {stats['total_sales']:.2f} ‚ÇΩ\n\n"
            "üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
        )
        stats_label = tk.Label(
            self.content_frame,
            text=stats_text,
            font=('Arial', 13),
            bg='white',
            fg='#34495e',
            justify='left'
        )
        stats_label.pack(pady=20)

    # ------------------ –ú–û–î–£–õ–¨: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ------------------

    def show_users(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
        self.clear_content()
        title = tk.Label(
            self.content_frame,
            text="üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò",
            font=('Arial', 16, 'bold'),
            bg='white',
            fg='#3498db'
        )
        title.pack(pady=15)

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ CRUD
        btn_frame = tk.Frame(self.content_frame, bg='white')
        btn_frame.pack(fill='x', padx=20, pady=(0, 10))
        tk.Button(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å", command=self.add_user, bg='#2ecc71', fg='white',
                  font=('Arial', 11, 'bold')).pack(side='left', padx=5)
        tk.Button(btn_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_user, bg='#f1c40f', fg='white',
                  font=('Arial', 11, 'bold')).pack(side='left', padx=5)
        tk.Button(btn_frame, text="–£–¥–∞–ª–∏—Ç—å", command=self.delete_user, bg='#e74c3c', fg='white',
                  font=('Arial', 11, 'bold')).pack(side='left', padx=5)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        columns = ('id', 'username', 'full_name', 'role', 'email', 'created_at')
        self.users_tree = ttk.Treeview(self.content_frame, columns=columns, show='headings', selectmode='browse')
        headings = {
            'id': 'ID', 'username': '–õ–æ–≥–∏–Ω', 'full_name': '–ü–æ–ª–Ω–æ–µ –∏–º—è',
            'role': '–†–æ–ª—å', 'email': 'Email', 'created_at': '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
        }
        for col in columns:
            self.users_tree.heading(col, text=headings[col])
            self.users_tree.column(col, width=100, anchor='center')
        self.users_tree.column('username', width=120)
        self.users_tree.column('full_name', width=180)
        self.users_tree.column('email', width=180)
        self.users_tree.pack(fill='both', expand=True, padx=20, pady=10)

        self.load_users()

    def load_users(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É."""
        for row in self.users_tree.get_children():
            self.users_tree.delete(row)
        users = self.db.fetch_all('users', order_by='id')
        for user in users:
            self.users_tree.insert('', 'end', values=user)

    def add_user(self):
        """–û–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        dialog = UserForm(self.root, "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if dialog.result:
            username, full_name, role, email, password = dialog.result
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.db.insert('users',
                           ['username', 'full_name', 'role', 'email', 'password', 'created_at'],
                           [username, full_name, role, email, password, now])
            self.load_users()

    def edit_user(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        selected = self.users_tree.selection()
        if not selected:
            messagebox.showwarning("–í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        values = self.users_tree.item(selected[0], 'values')
        user_id = values[0]
        dialog = UserForm(self.root, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", initial=values[1:])
        if dialog.result:
            username, full_name, role, email, password = dialog.result
            self.db.update('users', user_id,
                           ['username', 'full_name', 'role', 'email', 'password'],
                           [username, full_name, role, email, password])
            self.load_users()

    def delete_user(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
        selected = self.users_tree.selection()
        if not selected:
            messagebox.showwarning("–í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        values = self.users_tree.item(selected[0], 'values')
        user_id, username = values[0], values[1]
        if messagebox.askyesno("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}'?"):
            self.db.delete('users', user_id)
            self.load_users()

    # ------------------ –ú–û–î–£–õ–¨: –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò ------------------

    def show_products(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏."""
        self.clear_content()
        title = tk.Label(
            self.content_frame,
            text="üì¶ –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò",
            font=('Arial', 16, 'bold'),
            bg='white',
            fg='#27ae60'
        )
        title.pack(pady=15)

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ CRUD
        btn_frame = tk.Frame(self.content_frame, bg='white')
        btn_frame.pack(fill='x', padx=20, pady=(0, 10))
        tk.Button(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å", command=self.add_product, bg='#2ecc71', fg='white',
                  font=('Arial', 11, 'bold')).pack(side='left', padx=5)
        tk.Button(btn_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_product, bg='#f1c40f', fg='white',
                  font=('Arial', 11, 'bold')).pack(side='left', padx=5)
        tk.Button(btn_frame, text="–£–¥–∞–ª–∏—Ç—å", command=self.delete_product, bg='#e74c3c', fg='white',
                  font=('Arial', 11, 'bold')).pack(side='left', padx=5)

        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        columns = ('id', 'name', 'price', 'quantity', 'category', 'created_at')
        self.products_tree = ttk.Treeview(self.content_frame, columns=columns, show='headings', selectmode='browse')
        headings = {
            'id': 'ID', 'name': '–ù–∞–∑–≤–∞–Ω–∏–µ', 'price': '–¶–µ–Ω–∞ (‚ÇΩ)',
            'quantity': '–û—Å—Ç–∞—Ç–æ–∫', 'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', 'created_at': '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
        }
        for col in columns:
            self.products_tree.heading(col, text=headings[col])
            self.products_tree.column(col, width=100, anchor='center')
        self.products_tree.column('name', width=180)
        self.products_tree.column('category', width=120)
        self.products_tree.pack(fill='both', expand=True, padx=20, pady=10)

        self.load_products()

    def load_products(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É."""
        for row in self.products_tree.get_children():
            self.products_tree.delete(row)
        products = self.db.fetch_all('products', order_by='name')
        for prod in products:
            pid, name, price, qty, category, created = prod
            self.products_tree.insert('', 'end', values=(pid, name, f"{price:.2f}", qty, category, created))

    def add_product(self):
        """–û–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞."""
        dialog = ProductForm(self.root, "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        if dialog.result:
            name, price, quantity, category = dialog.result
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.db.insert('products',
                           ['name', 'price', 'quantity', 'category', 'created_at'],
                           [name, price, quantity, category, now])
            self.load_products()

    def edit_product(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä."""
        selected = self.products_tree.selection()
        if not selected:
            messagebox.showwarning("–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        values = self.products_tree.item(selected[0], 'values')
        product_id = values[0]
        # –ü—Ä–∏–≤–æ–¥–∏–º price –∫ float, quantity –∫ int
        initial = (values[1], float(values[2]), int(values[3]), values[4])
        dialog = ProductForm(self.root, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", initial=initial)
        if dialog.result:
            name, price, quantity, category = dialog.result
            self.db.update('products', product_id,
                           ['name', 'price', 'quantity', 'category'],
                           [name, price, quantity, category])
            self.load_products()

    def delete_product(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
        selected = self.products_tree.selection()
        if not selected:
            messagebox.showwarning("–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        values = self.products_tree.item(selected[0], 'values')
        product_id, name = values[0], values[1]
        if messagebox.askyesno("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", f"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä '{name}'?"):
            self.db.delete('products', product_id)
            self.load_products()

    # ------------------ –ú–û–î–£–õ–¨: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê–ú–ò ------------------

    def show_customers(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏."""
        self.clear_content()
        title = tk.Label(
            self.content_frame,
            text="üë§ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê–ú–ò",
            font=('Arial', 16, 'bold'),
            bg='white',
            fg='#e67e22'
        )
        title.pack(pady=15)

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ CRUD
        btn_frame = tk.Frame(self.content_frame, bg='white')
        btn_frame.pack(fill='x', padx=20, pady=(0, 10))
        tk.Button(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å", command=self.add_customer, bg='#2ecc71', fg='white',
                  font=('Arial', 11, 'bold')).pack(side='left', padx=5)
        tk.Button(btn_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_customer, bg='#f1c40f', fg='white',
                  font=('Arial', 11, 'bold')).pack(side='left', padx=5)
        tk.Button(btn_frame, text="–£–¥–∞–ª–∏—Ç—å", command=self.delete_customer, bg='#e74c3c', fg='white',
                  font=('Arial', 11, 'bold')).pack(side='left', padx=5)

        # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        columns = ('id', 'name', 'email', 'phone', 'address', 'created_at')
        self.customers_tree = ttk.Treeview(self.content_frame, columns=columns, show='headings', selectmode='browse')
        headings = {
            'id': 'ID', 'name': '–ò–º—è/–ö–æ–º–ø–∞–Ω–∏—è', 'email': 'Email',
            'phone': '–¢–µ–ª–µ—Ñ–æ–Ω', 'address': '–ê–¥—Ä–µ—Å', 'created_at': '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
        }
        for col in columns:
            self.customers_tree.heading(col, text=headings[col])
            self.customers_tree.column(col, width=100, anchor='center')
        self.customers_tree.column('name', width=180)
        self.customers_tree.column('email', width=180)
        self.customers_tree.pack(fill='both', expand=True, padx=20, pady=10)

        self.load_customers()

    def load_customers(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É."""
        for row in self.customers_tree.get_children():
            self.customers_tree.delete(row)
        customers = self.db.fetch_all('customers', order_by='name')
        for cust in customers:
            cid, name, email, phone, address, created = cust
            self.customers_tree.insert('', 'end', values=(cid, name, email, phone, address, created))

    def add_customer(self):
        """–û–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        dialog = CustomerForm(self.root, "–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
        if dialog.result:
            name, email, phone, address = dialog.result
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.db.insert('customers',
                           ['name', 'email', 'phone', 'address', 'created_at'],
                           [name, email, phone, address, now])
            self.load_customers()

    def edit_customer(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        selected = self.customers_tree.selection()
        if not selected:
            messagebox.showwarning("–í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        values = self.customers_tree.item(selected[0], 'values')
        cust_id = values[0]
        initial = (values[1], values[2], values[3], values[4])
        dialog = CustomerForm(self.root, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", initial=initial)
        if dialog.result:
            name, email, phone, address = dialog.result
            self.db.update('customers', cust_id,
                           ['name', 'email', 'phone', 'address'],
                           [name, email, phone, address])
            self.load_customers()

    def delete_customer(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
        selected = self.customers_tree.selection()
        if not selected:
            messagebox.showwarning("–í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        values = self.customers_tree.item(selected[0], 'values')
        cust_id, name = values[0], values[1]
        if messagebox.askyesno("–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", f"–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ '{name}'?"):
            self.db.delete('customers', cust_id)
            self.load_customers()

    # ------------------ –ú–û–î–£–õ–¨: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò ------------------

    def show_orders(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏."""
        self.clear_content()
        title = tk.Label(
            self.content_frame,
            text="üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò",
            font=('Arial', 16, 'bold'),
            bg='white',
            fg='#9b59b6'
        )
        title.pack(pady=15)

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ CRUD –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
        btn_frame = tk.Frame(self.content_frame, bg='white')
        btn_frame.pack(fill='x', padx=20, pady=(0, 10))
        tk.Button(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", command=self.add_order, bg='#2ecc71', fg='white',
                  font=('Arial', 11, 'bold')).pack(side='left', padx=5)
        tk.Button(btn_frame, text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", command=self.change_order_status, bg='#f1c40f', fg='white',
                  font=('Arial', 11, 'bold')).pack(side='left', padx=5)
        tk.Button(btn_frame, text="–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", command=self.delete_order, bg='#e74c3c', fg='white',
                  font=('Arial', 11, 'bold')).pack(side='left', padx=5)

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        columns = ('id', 'customer', 'total_amount', 'status', 'created_date')
        self.orders_tree = ttk.Treeview(self.content_frame, columns=columns, show='headings', selectmode='browse')
        headings = {
            'id': '‚Ññ –∑–∞–∫–∞–∑–∞', 'customer': '–ö–ª–∏–µ–Ω—Ç', 'total_amount': '–°—É–º–º–∞ (‚ÇΩ)',
            'status': '–°—Ç–∞—Ç—É—Å', 'created_date': '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
        }
        for col in columns:
            self.orders_tree.heading(col, text=headings[col])
            self.orders_tree.column(col, width=100, anchor='center')
        self.orders_tree.column('customer', width=180)
        self.orders_tree.pack(fill='both', expand=True, padx=20, pady=10)

        self.load_orders()

    def load_orders(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É."""
        for row in self.orders_tree.get_children():
            self.orders_tree.delete(row)
        cursor = self.db.connect().cursor()
        cursor.execute("""
            SELECT o.id, c.name, o.total_amount, o.status, o.created_date
            FROM orders o
            JOIN customers c ON o.customer_id = c.id
            ORDER BY o.created_date DESC
        """)
        for order in cursor.fetchall():
            oid, cust_name, total, status, created = order
            self.orders_tree.insert('', 'end', values=(f"#{oid:04d}", cust_name, f"{total:.2f}", status, created))

    def add_order(self):
        """–û–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–π."""
        dialog = OrderForm(self.root, self.db)
        if dialog.result:
            customer_id, items = dialog.result
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            total_amount = sum(item['quantity'] * item['price'] for item in items)
            status = "–ù–æ–≤—ã–π"
            order_id = self.db.insert('orders',
                                      ['customer_id', 'total_amount', 'status', 'created_date'],
                                      [customer_id, total_amount, status, now])
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ order_items
            for item in items:
                self.db.insert('order_items',
                               ['order_id', 'product_id', 'quantity', 'price'],
                               [order_id, item['product_id'], item['quantity'], item['price']])
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
                cursor = self.db.connect().cursor()
                cursor.execute("SELECT quantity FROM products WHERE id=?", (item['product_id'],))
                current_qty = cursor.fetchone()[0]
                new_qty = current_qty - item['quantity']
                self.db.update('products', item['product_id'], ['quantity'], [new_qty])
            self.load_orders()
            self.load_products()  # —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫

    def change_order_status(self):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
        selected = self.orders_tree.selection()
        if not selected:
            messagebox.showwarning("–í—ã–±–æ—Ä –∑–∞–∫–∞–∑–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
            return
        values = self.orders_tree.item(selected[0], 'values')
        order_number = values[0]  # –≤–∏–¥–∞ "#0001"
        order_id = int(order_number.strip('#'))
        # –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        new_status = simpledialog.askstring("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", parent=self.root)
        if new_status:
            cursor = self.db.connect().cursor()
            cursor.execute("UPDATE orders SET status=? WHERE id=?", (new_status, order_id))
            self.db.conn.commit()
            self.load_orders()

    def delete_order(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤."""
        selected = self.orders_tree.selection()
        if not selected:
            messagebox.showwarning("–í—ã–±–æ—Ä –∑–∞–∫–∞–∑–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        values = self.orders_tree.item(selected[0], 'values')
        order_number = values[0]
        order_id = int(order_number.strip('#'))
        if messagebox.askyesno("–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", f"–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ {order_number}?"):
            # –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            cursor = self.db.connect().cursor()
            cursor.execute("SELECT product_id, quantity FROM order_items WHERE order_id=?", (order_id,))
            items = cursor.fetchall()
            for prod_id, qty in items:
                cursor.execute("SELECT quantity FROM products WHERE id=?", (prod_id,))
                current_qty = cursor.fetchone()[0]
                new_qty = current_qty + qty
                self.db.update('products', prod_id, ['quantity'], [new_qty])
            # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
            self.db.delete('order_items', order_id)  # —É–¥–∞–ª–∏–º –≤—Å–µ order_items (—á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª ON DELETE CASCADE, –Ω–æ –Ω–µ –≤–æ –≤—Å–µ—Ö SQLite –≤–µ—Ä—Å–∏—è—Ö)
            cursor.execute("DELETE FROM order_items WHERE order_id=?", (order_id,))
            self.db.conn.commit()
            # –£–¥–∞–ª—è–µ–º —Å–∞–º –∑–∞–∫–∞–∑
            self.db.delete('orders', order_id)
            self.load_orders()
            self.load_products()

    # ------------------ –ú–û–î–£–õ–¨: –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê ------------------

    def show_stats(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
        self.clear_content()
        title = tk.Label(
            self.content_frame,
            text="üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê",
            font=('Arial', 16, 'bold'),
            bg='white',
            fg='#34495e'
        )
        title.pack(pady=15)

        cursor = self.db.connect().cursor()
        stats = {}

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        cursor.execute("SELECT COUNT(*) FROM users")
        stats['users'] = cursor.fetchone()[0]

        # –¢–æ–≤–∞—Ä—ã –∏ –æ—Å—Ç–∞—Ç–æ–∫
        cursor.execute("SELECT COUNT(*) FROM products")
        stats['products'] = cursor.fetchone()[0]
        cursor.execute("SELECT SUM(quantity) FROM products")
        stats['total_products_qty'] = cursor.fetchone()[0] or 0

        # –ö–ª–∏–µ–Ω—Ç—ã
        cursor.execute("SELECT COUNT(*) FROM customers")
        stats['customers'] = cursor.fetchone()[0]

        # –ó–∞–∫–∞–∑—ã –∏ —Å—É–º–º—ã
        cursor.execute("SELECT COUNT(*) FROM orders")
        stats['orders'] = cursor.fetchone()[0]
        cursor.execute("SELECT SUM(total_amount) FROM orders")
        stats['total_sales'] = cursor.fetchone()[0] or 0
        cursor.execute("SELECT AVG(total_amount) FROM orders")
        stats['avg_order'] = cursor.fetchone()[0] or 0

        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        stats['orders_per_customer'] = stats['orders'] / max(stats['customers'], 1)
        stats['sales_per_product'] = stats['total_sales'] / max(stats['products'], 1)

        stats_text = (
            f"üìà –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:\n\n"
            f"üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n\n"
            f"üì¶ –¢–û–í–ê–†–´:\n"
            f"   ‚Ä¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {stats['products']}\n"
            f"   ‚Ä¢ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {stats['total_products_qty']} —à—Ç.\n\n"
            f"üë§ –ö–õ–ò–ï–ù–¢–´:\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['customers']}\n\n"
            f"üìã –ó–ê–ö–ê–ó–´:\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['orders']}\n"
            f"   ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {stats['total_sales']:.2f} ‚ÇΩ\n"
            f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['avg_order']:.2f} ‚ÇΩ\n\n"
            f"üéØ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:\n"
            f"   ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {stats['orders_per_customer']:.2f}\n"
            f"   ‚Ä¢ –ü—Ä–æ–¥–∞–∂ –Ω–∞ —Ç–æ–≤–∞—Ä: {stats['sales_per_product']:.2f} ‚ÇΩ\n\n"
            "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!"
        )
        stats_label = tk.Label(
            self.content_frame,
            text=stats_text,
            font=('Arial', 12),
            bg='white',
            fg='#2c3e50',
            justify='left'
        )
        stats_label.pack(pady=20)

    def exit_app(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
        if messagebox.askyesno("–í—ã—Ö–æ–¥", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ ERP —Å–∏—Å—Ç–µ–º—ã?"):
            if self.db.conn:
                self.db.conn.close()
            self.root.destroy()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        self.root.mainloop()


# ------------------ –§–û–†–ú–´ (–î–ò–ê–õ–û–ì–ò) ------------------

class UserForm(tk.Toplevel):
    """–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    def __init__(self, parent, title, initial=None):
        super().__init__(parent)
        self.title(title)
        self.geometry("400x350")
        self.resizable(False, False)
        self.result = None

        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        tk.Label(self, text="–õ–æ–≥–∏–Ω:", anchor='w').pack(fill='x', padx=20, pady=(20, 0))
        self.username_var = tk.StringVar(value=initial[0] if initial else "")
        tk.Entry(self, textvariable=self.username_var).pack(fill='x', padx=20)

        tk.Label(self, text="–ü–æ–ª–Ω–æ–µ –∏–º—è:", anchor='w').pack(fill='x', padx=20, pady=(10, 0))
        self.fullname_var = tk.StringVar(value=initial[1] if initial else "")
        tk.Entry(self, textvariable=self.fullname_var).pack(fill='x', padx=20)

        tk.Label(self, text="–†–æ–ª—å:", anchor='w').pack(fill='x', padx=20, pady=(10, 0))
        self.role_var = tk.StringVar(value=initial[2] if initial else "")
        tk.Entry(self, textvariable=self.role_var).pack(fill='x', padx=20)

        tk.Label(self, text="Email:", anchor='w').pack(fill='x', padx=20, pady=(10, 0))
        self.email_var = tk.StringVar(value=initial[3] if initial else "")
        tk.Entry(self, textvariable=self.email_var).pack(fill='x', padx=20)

        tk.Label(self, text="–ü–∞—Ä–æ–ª—å:", anchor='w').pack(fill='x', padx=20, pady=(10, 0))
        self.password_var = tk.StringVar(value=initial[4] if initial else "")
        tk.Entry(self, textvariable=self.password_var, show='*').pack(fill='x', padx=20)

        # –ö–Ω–æ–ø–∫–∏ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å/–û—Ç–º–µ–Ω–∞
        btn_frame = tk.Frame(self)
        btn_frame.pack(pady=20)
        tk.Button(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", width=10, command=self.on_save, bg='#27ae60', fg='white').pack(side='left', padx=10)
        tk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞", width=10, command=self.destroy, bg='#e74c3c', fg='white').pack(side='left')

        self.transient(parent)
        self.grab_set()
        parent.wait_window(self)

    def on_save(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ."""
        username = self.username_var.get().strip()
        full_name = self.fullname_var.get().strip()
        role = self.role_var.get().strip()
        email = self.email_var.get().strip()
        password = self.password_var.get().strip()
        if not (username and full_name and role and password):
            messagebox.showwarning("–í–∞–ª–∏–¥–∞—Ü–∏—è", "–ü–æ–ª—è –ª–æ–≥–∏–Ω, –ø–æ–ª–Ω–æ–µ –∏–º—è, —Ä–æ–ª—å –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")
            return
        self.result = (username, full_name, role, email, password)
        self.destroy()


class ProductForm(tk.Toplevel):
    """–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""

    def __init__(self, parent, title, initial=None):
        super().__init__(parent)
        self.title(title)
        self.geometry("400x300")
        self.resizable(False, False)
        self.result = None

        tk.Label(self, text="–ù–∞–∑–≤–∞–Ω–∏–µ:", anchor='w').pack(fill='x', padx=20, pady=(20, 0))
        self.name_var = tk.StringVar(value=initial[0] if initial else "")
        tk.Entry(self, textvariable=self.name_var).pack(fill='x', padx=20)

        tk.Label(self, text="–¶–µ–Ω–∞ (‚ÇΩ):", anchor='w').pack(fill='x', padx=20, pady=(10, 0))
        self.price_var = tk.DoubleVar(value=initial[1] if initial else 0.0)
        tk.Entry(self, textvariable=self.price_var).pack(fill='x', padx=20)

        tk.Label(self, text="–û—Å—Ç–∞—Ç–æ–∫:", anchor='w').pack(fill='x', padx=20, pady=(10, 0))
        self.qty_var = tk.IntVar(value=initial[2] if initial else 0)
        tk.Entry(self, textvariable=self.qty_var).pack(fill='x', padx=20)

        tk.Label(self, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", anchor='w').pack(fill='x', padx=20, pady=(10, 0))
        self.category_var = tk.StringVar(value=initial[3] if initial else "")
        tk.Entry(self, textvariable=self.category_var).pack(fill='x', padx=20)

        btn_frame = tk.Frame(self)
        btn_frame.pack(pady=20)
        tk.Button(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", width=10, command=self.on_save, bg='#27ae60', fg='white').pack(side='left', padx=10)
        tk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞", width=10, command=self.destroy, bg='#e74c3c', fg='white').pack(side='left')

        self.transient(parent)
        self.grab_set()
        parent.wait_window(self)

    def on_save(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ."""
        name = self.name_var.get().strip()
        try:
            price = float(self.price_var.get())
        except ValueError:
            messagebox.showwarning("–í–∞–ª–∏–¥–∞—Ü–∏—è", "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        try:
            quantity = int(self.qty_var.get())
        except ValueError:
            messagebox.showwarning("–í–∞–ª–∏–¥–∞—Ü–∏—è", "–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
            return
        category = self.category_var.get().strip()
        if not name:
            messagebox.showwarning("–í–∞–ª–∏–¥–∞—Ü–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.")
            return
        self.result = (name, price, quantity, category)
        self.destroy()


class CustomerForm(tk.Toplevel):
    """–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""

    def __init__(self, parent, title, initial=None):
        super().__init__(parent)
        self.title(title)
        self.geometry("400x300")
        self.resizable(False, False)
        self.result = None

        tk.Label(self, text="–ò–º—è/–ö–æ–º–ø–∞–Ω–∏—è:", anchor='w').pack(fill='x', padx=20, pady=(20, 0))
        self.name_var = tk.StringVar(value=initial[0] if initial else "")
        tk.Entry(self, textvariable=self.name_var).pack(fill='x', padx=20)

        tk.Label(self, text="Email:", anchor='w').pack(fill='x', padx=20, pady=(10, 0))
        self.email_var = tk.StringVar(value=initial[1] if initial else "")
        tk.Entry(self, textvariable=self.email_var).pack(fill='x', padx=20)

        tk.Label(self, text="–¢–µ–ª–µ—Ñ–æ–Ω:", anchor='w').pack(fill='x', padx=20, pady=(10, 0))
        self.phone_var = tk.StringVar(value=initial[2] if initial else "")
        tk.Entry(self, textvariable=self.phone_var).pack(fill='x', padx=20)

        tk.Label(self, text="–ê–¥—Ä–µ—Å:", anchor='w').pack(fill='x', padx=20, pady=(10, 0))
        self.address_var = tk.StringVar(value=initial[3] if initial else "")
        tk.Entry(self, textvariable=self.address_var).pack(fill='x', padx=20)

        btn_frame = tk.Frame(self)
        btn_frame.pack(pady=20)
        tk.Button(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", width=10, command=self.on_save, bg='#27ae60', fg='white').pack(side='left', padx=10)
        tk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞", width=10, command=self.destroy, bg='#e74c3c', fg='white').pack(side='left')

        self.transient(parent)
        self.grab_set()
        parent.wait_window(self)

    def on_save(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ."""
        name = self.name_var.get().strip()
        email = self.email_var.get().strip()
        phone = self.phone_var.get().strip()
        address = self.address_var.get().strip()
        if not name:
            messagebox.showwarning("–í–∞–ª–∏–¥–∞—Ü–∏—è", "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.")
            return
        self.result = (name, email, phone, address)
        self.destroy()


class OrderForm(tk.Toplevel):
    """–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –≤—ã–±–æ—Ä–æ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤."""

    def __init__(self, parent, db: Database):
        super().__init__(parent)
        self.title("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
        self.geometry("600x500")
        self.resizable(False, False)
        self.db = db
        self.result = None
        self.items = []

        # –í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
        tk.Label(self, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:", anchor='w').pack(fill='x', padx=20, pady=(20, 0))
        self.customers = self.db.fetch_all('customers', order_by='name')
        cust_names = [c[1] for c in self.customers]
        self.cust_var = tk.StringVar()
        self.cust_combobox = ttk.Combobox(self, textvariable=self.cust_var, values=cust_names, state='readonly')
        self.cust_combobox.pack(fill='x', padx=20)
        if cust_names:
            self.cust_combobox.current(0)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞
        columns = ('product', 'quantity', 'price', 'subtotal')
        self.items_tree = ttk.Treeview(self, columns=columns, show='headings', height=8)
        headings = {'product': '–¢–æ–≤–∞—Ä', 'quantity': '–ö–æ–ª-–≤–æ', 'price': '–¶–µ–Ω–∞', 'subtotal': '–°—É–º–º–∞'}
        for col in columns:
            self.items_tree.heading(col, text=headings[col])
            self.items_tree.column(col, width=120, anchor='center')
        self.items_tree.pack(fill='both', expand=True, padx=20, pady=(10, 0))

        # –ü–∞–Ω–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑
        add_frame = tk.Frame(self)
        add_frame.pack(fill='x', padx=20, pady=10)
        tk.Label(add_frame, text="–¢–æ–≤–∞—Ä:", anchor='w').grid(row=0, column=0, padx=(0, 5), pady=5)
        self.products = self.db.fetch_all('products', order_by='name')
        prod_names = [p[1] for p in self.products]
        self.prod_var = tk.StringVar()
        self.prod_combobox = ttk.Combobox(add_frame, textvariable=self.prod_var, values=prod_names, state='readonly', width=25)
        self.prod_combobox.grid(row=0, column=1, padx=(0, 10), pady=5)
        if prod_names:
            self.prod_combobox.current(0)

        tk.Label(add_frame, text="–ö–æ–ª-–≤–æ:", anchor='w').grid(row=0, column=2, padx=(0, 5), pady=5)
        self.item_qty_var = tk.IntVar(value=1)
        tk.Entry(add_frame, textvariable=self.item_qty_var, width=6).grid(row=0, column=3, padx=(0, 10), pady=5)

        tk.Button(add_frame, text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", command=self.add_item_to_order, bg='#3498db', fg='white') \
            .grid(row=0, column=4, padx=(0, 5), pady=5)

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
        self.total_label = tk.Label(self, text="–ò—Ç–æ–≥–æ: 0.00 ‚ÇΩ", font=('Arial', 14, 'bold'), bg='white', fg='#2c3e50', anchor='e')
        self.total_label.pack(fill='x', padx=20, pady=(5, 0))

        # –ö–Ω–æ–ø–∫–∏ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å/–û—Ç–º–µ–Ω–∞
        btn_frame = tk.Frame(self)
        btn_frame.pack(pady=15)
        tk.Button(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑", width=15, command=self.on_save_order, bg='#27ae60', fg='white').pack(side='left', padx=10)
        tk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞", width=15, command=self.destroy, bg='#e74c3c', fg='white').pack(side='left')

        self.transient(parent)
        self.grab_set()
        parent.wait_window(self)

    def add_item_to_order(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ–≤–∞—Ä–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–∞."""
        prod_name = self.prod_var.get()
        qty = self.item_qty_var.get()
        if not prod_name or qty <= 0:
            messagebox.showwarning("–í–∞–ª–∏–¥–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
            return
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
        prod = next((p for p in self.products if p[1] == prod_name), None)
        if not prod:
            return
        prod_id, _, price, stock_qty, _, _ = prod
        if qty > stock_qty:
            messagebox.showwarning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞", f"–ù–∞ —Å–∫–ª–∞–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {stock_qty} —à—Ç.")
            return
        subtotal = qty * price
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ø–∏—Å–∫–µ –ø–æ–∑–∏—Ü–∏–π
        self.items.append({
            'product_id': prod_id,
            'product_name': prod_name,
            'quantity': qty,
            'price': price,
            'subtotal': subtotal
        })
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        self.refresh_items_table()

    def refresh_items_table(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–∑–∏—Ü–∏–π –∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É."""
        for row in self.items_tree.get_children():
            self.items_tree.delete(row)
        total = 0
        for item in self.items:
            total += item['subtotal']
            self.items_tree.insert('', 'end', values=(
                item['product_name'], item['quantity'], f"{item['price']:.2f}", f"{item['subtotal']:.2f}"
            ))
        self.total_label.config(text=f"–ò—Ç–æ–≥–æ: {total:.2f} ‚ÇΩ")

    def on_save_order(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ."""
        cust_name = self.cust_var.get()
        if not cust_name:
            messagebox.showwarning("–í–∞–ª–∏–¥–∞—Ü–∏—è", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞.")
            return
        if not self.items:
            messagebox.showwarning("–í–∞–ª–∏–¥–∞—Ü–∏—è", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–æ–≤–∞—Ä–Ω—É—é –ø–æ–∑–∏—Ü–∏—é.")
            return
        # –ù–∞—Ö–æ–¥–∏–º ID –∫–ª–∏–µ–Ω—Ç–∞
        customer = next((c for c in self.customers if c[1] == cust_name), None)
        if not customer:
            return
        customer_id = customer[0]
        self.result = (customer_id, self.items)
        self.destroy()


def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ ERP —Å–∏—Å—Ç–µ–º—ã v3.0...")
    try:
        app = SimpleERP()
        print("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        app.run()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
